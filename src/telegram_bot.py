import logging
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from .config import settings, AppConstants
from .container import (
    get_user_app_service,
    get_question_app_service,
    get_answer_app_service,
)
from .models import User, Question

logger = logging.getLogger(__name__)


class InterviewBot:
    """Telegram –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º"""
    
    def __init__(self):
        self.application = Application.builder().token(settings.telegram_bot_token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ app-layer
        users = get_user_app_service()
        await users.get_or_create(user.id, user.username, user.first_name, user.last_name)
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º. 

üéØ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
‚Ä¢ –î–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å

üöÄ –ù–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å:
        """
        
        keyboard = [
            [InlineKeyboardButton("üë∂ Junior", callback_data="level_junior")],
            [InlineKeyboardButton("üë®‚Äçüíª Middle", callback_data="level_middle")],
            [InlineKeyboardButton("üë®‚Äçüíº Senior", callback_data="level_senior")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
üîπ /stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
üîπ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

üìù –ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç
‚Ä¢ –ì–æ–ª–æ—Å–æ–º - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

üéØ –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ Junior - –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
‚Ä¢ Middle - —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
‚Ä¢ Senior - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (backend-—Ñ–æ–∫—É—Å):
‚Ä¢ System Design - –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º
‚Ä¢ Algorithms - –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Databases - –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Networking - —Å–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ Security - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ Backend - –±—ç–∫–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        """
        
        await update.message.reply_text(help_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        
        try:
            stats = await UserService.get_user_stats(user_id)
            
            if stats.user_id == 0:
                await update.message.reply_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
                return
            
            stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üéØ –£—Ä–æ–≤–µ–Ω—å: {stats.level or '–ù–µ –≤—ã–±—Ä–∞–Ω'}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {stats.category or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}
üèÜ –û–±—â–∏–π —Å—á–µ—Ç: {stats.total_score}
‚ùì –û—Ç–≤–µ—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats.questions_answered}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats.average_score:.1f}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.last_activity.strftime('%d.%m.%Y %H:%M') if stats.last_activity else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            """
            
            await update.message.reply_text(stats_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        
        try:
            users = get_user_app_service()
            user = await users.get_or_create(user_id, None, None, None)
            
            settings_text = f"""
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name or user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üéØ –£—Ä–æ–≤–µ–Ω—å: {user.level or '–ù–µ –≤—ã–±—Ä–∞–Ω'}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user.category or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
            """
            
            keyboard = [
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="settings_level")],
                [InlineKeyboardButton("üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="settings_category")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(settings_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        try:
            if data.startswith("level_"):
                level = data.split("_")[1]
                await self.handle_level_selection(query, level)
                
            elif data.startswith("category_"):
                category = data.split("_")[1]
                await self.handle_category_selection(query, category)
                
            elif data == "settings_level":
                await self.show_level_selection(query)
                
            elif data == "settings_category":
                await self.show_category_selection(query)
                
            elif data == "get_question":
                await self.get_question_for_user(query, user_id)
                
            elif data == "skip_question":
                await self.skip_question(query, user_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_level_selection(self, query, level: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
        user_id = query.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = get_user_app_service()
        await users.update_level(user_id, level)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        level_name = AppConstants.LEVELS.get(level, level)
        text = f"‚úÖ –í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {level_name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:"
        
        keyboard = []
        for key, value in AppConstants.CATEGORIES.items():
            keyboard.append([InlineKeyboardButton(value, callback_data=f"category_{key}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def handle_category_selection(self, query, category: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user_id = query.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = get_user_app_service()
        await users.update_category(user_id, category)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤–æ–ø—Ä–æ—Å–∞–º
        category_name = AppConstants.CATEGORIES.get(category, category)
        text = f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–ì–æ—Ç–æ–≤—ã –∫ –≤–æ–ø—Ä–æ—Å–∞–º! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        
        keyboard = [[InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="get_question")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_level_selection(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:"
        
        keyboard = [
            [InlineKeyboardButton("üë∂ Junior", callback_data="level_junior")],
            [InlineKeyboardButton("üë®‚Äçüíª Middle", callback_data="level_middle")],
            [InlineKeyboardButton("üë®‚Äçüíº Senior", callback_data="level_senior")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_category_selection(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        
        keyboard = []
        for key, value in AppConstants.CATEGORIES.items():
            keyboard.append([InlineKeyboardButton(value, callback_data=f"category_{key}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    
    async def get_question_for_user(self, query, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            users = get_user_app_service()
            user = await users.get_or_create(user_id, None, None, None)
            
            if not user.level or not user.category:
                await query.edit_message_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
            qs = get_question_app_service()
            question = await qs.random_for_user(user_id, user.level, user.category)
            
            if not question:
                await query.edit_message_text(
                    f"‚ùå –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {user.level} –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {user.category} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
            question_text = f"""
üéØ –í–æ–ø—Ä–æ—Å #{question.id}

üìù {question.title}

üìÑ {question.content}

üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: {', '.join(question.hints) if question.hints else '–ù–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫'}
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {question.points}

üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
            """
            
            keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="skip_question")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(question_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
    
    async def skip_question(self, query, user_id: int):
        """–ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            users = get_user_app_service()
            user = await users.get_or_create(user_id, None, None, None)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            qs = get_question_app_service()
            question = await qs.random_for_user(user_id, user.level, user.category)
            
            if not question:
                await query.edit_message_text(
                    f"‚ùå –ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {user.level} –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {user.category} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await self.get_question_for_user(query, user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        try:
            users = get_user_app_service()
            user = await users.get_or_create(user_id, None, None, None)
            
            if not user.current_question_id:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            answers = get_answer_app_service()
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—É—á–∏–º –≤–æ–ø—Ä–æ—Å
            qs = get_question_app_service()
            question = await qs.get(user.current_question_id)
            answer, evaluation = await answers.answer_text(user_id, user.current_question_id, text)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π
            points = question.points if question else 0
            response_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:

üèÜ –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {evaluation.score}/{points}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {'–î–∞' if evaluation.is_correct else '–ù–µ—Ç'}

üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:
{evaluation.feedback}

üéØ –•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?
            """
            
            keyboard = [[InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="get_question")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        voice = update.message.voice
        
        try:
            users = get_user_app_service()
            user = await users.get_or_create(user_id, None, None, None)
            
            if not user.current_question_id:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            answers = get_answer_app_service()
            qs = get_question_app_service()
            question = await qs.get(user.current_question_id)
            answer, evaluation = await answers.answer_voice(
                user_id, user.current_question_id, voice.file_id, settings.telegram_bot_token
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π
            points = question.points if question else 0
            response_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:

üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "{answer.answer_text}"

üèÜ –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {evaluation.score}/{points}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {'–î–∞' if evaluation.is_correct else '–ù–µ—Ç'}

üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:
{evaluation.feedback}

üéØ –•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?
            """
            
            keyboard = [[InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="get_question")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await processing_msg.edit_text(response_text, reply_markup=reply_markup)
            
            # –§–∞–π–ª—ã –æ—á–∏—â–∞—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ AnswerAppService —á–µ—Ä–µ–∑ VoiceStorage
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        if update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.run_polling()


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = InterviewBot() 